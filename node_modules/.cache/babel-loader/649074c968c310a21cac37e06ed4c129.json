{"remainingRequest":"D:\\project\\dapp\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\dapp\\src\\utils\\utils.js","dependencies":[{"path":"D:\\project\\dapp\\src\\utils\\utils.js","mtime":1617258109000},{"path":"D:\\project\\dapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650249328532},{"path":"D:\\project\\dapp\\node_modules\\babel-loader\\lib\\index.js","mtime":1650249335774}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.array.index-of\";\nimport _classCallCheck from \"D:\\\\project\\\\dapp\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\project\\\\dapp\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"D:\\\\project\\\\dapp\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\n\nvar Utils =\n/*#__PURE__*/\nfunction () {\n  //构造函数\n  function Utils() {\n    _classCallCheck(this, Utils);\n\n    _defineProperty(this, \"getUserDevice\", function () {\n      var request = '';\n      var u = navigator.userAgent;\n      var isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1; //android终端或者uc浏览器\n\n      var isiOS = !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端！\n\n      if (isAndroid) {\n        request = {\n          isAndroid: true\n        };\n      }\n\n      if (isiOS) {\n        request = request = {\n          isIOS: true\n        };\n      }\n\n      return request;\n    });\n\n    this.instance = null;\n  } //单例模式\n\n\n  _createClass(Utils, [{\n    key: \"getNowTimeStamp\",\n\n    /**\n     * 获取当前时间（毫秒值）\n     * @returns {number}\n     */\n    value: function getNowTimeStamp() {\n      return new Date().getTime();\n    }\n    /**\n     * 获取URL中的？后面的参数\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getUrlParam\",\n    value: function getUrlParam() {\n      return document.location.toString().split(\"?\")[1];\n    }\n    /**\n     * 存储localStorage\n     */\n\n  }, {\n    key: \"setStore\",\n    value: function setStore(name, content) {\n      if (!name) return;\n\n      if (typeof content !== 'string') {\n        content = JSON.stringify(content);\n      }\n\n      window.localStorage.setItem(name, content);\n    }\n    /**\n     * 获取localStorage\n     */\n\n  }, {\n    key: \"getStore\",\n    value: function getStore(name) {\n      if (!name) return;\n      return window.localStorage.getItem(name);\n    }\n    /**\n     * 删除localStorage\n     */\n\n  }, {\n    key: \"removeStore\",\n    value: function removeStore(name) {\n      if (!name) return;\n      window.localStorage.removeItem(name);\n    }\n    /**\n     * 存储sessionStorage\n     */\n\n  }, {\n    key: \"setSessionStore\",\n    value: function setSessionStore(name, content) {\n      if (!name) return;\n\n      if (typeof content !== 'string') {\n        content = JSON.stringify(content);\n      }\n\n      window.sessionStorage.setItem(name, content);\n    }\n    /**\n     * 获取sessionStorage\n     */\n\n  }, {\n    key: \"getSessionStore\",\n    value: function getSessionStore(name) {\n      if (!name) return;\n      return window.sessionStorage.getItem(name);\n    }\n    /**\n     * 删除sessionStorage\n     */\n\n  }, {\n    key: \"removeSessionStore\",\n    value: function removeSessionStore(name) {\n      if (!name) return;\n      window.sessionStorage.removeItem(name);\n    }\n    /**\n     * 排序工具类\n     * 依据数组中对象的某个属性排序\n     * @param property  属性\n     * @param sort      升序降序    boolean\n     * @returns {function(*, *): number}\n     */\n\n  }, {\n    key: \"compareSort\",\n    value: function compareSort(property, sort) {\n      return function (a, b) {\n        return sort ? a[property] - b[property] : b[property] - a[property];\n      };\n    }\n    /**\n     * 判断是否为空\n     */\n\n  }, {\n    key: \"isNull\",\n    value: function isNull(str) {\n      return str !== undefined && str !== null && str != '';\n    }\n    /**\n     * 生成guid随机数\n     * @returns {string}\n     */\n\n  }, {\n    key: \"guid\",\n    value: function guid() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0,\n            v = c == 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n      });\n    }\n    /**\n     * 判断设备 Android/IOS\n     */\n\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!this.instance) {\n        this.instance = new Utils();\n      }\n\n      return this.instance;\n    }\n  }]);\n\n  return Utils;\n}();\n\nvar UTILS = Utils.getInstance();\nexport default UTILS;",{"version":3,"sources":["D:\\project\\dapp\\src\\utils\\utils.js"],"names":["Utils","request","u","navigator","userAgent","isAndroid","indexOf","isiOS","match","isIOS","instance","Date","getTime","document","location","toString","split","name","content","JSON","stringify","window","localStorage","setItem","getItem","removeItem","sessionStorage","property","sort","a","b","str","undefined","replace","c","r","Math","random","v","UTILS","getInstance"],"mappings":"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","sourcesContent":["class Utils {\n  //构造函数\n  constructor(){\n    this.instance=null;\n  }\n  //单例模式\n  static getInstance(){\n    if(!this.instance){\n      this.instance = new Utils();\n    }\n    return this.instance;\n  }\n\n  /**\n   * 获取当前时间（毫秒值）\n   * @returns {number}\n   */\n  getNowTimeStamp(){\n    return new Date().getTime()\n  }\n\n  /**\n   * 获取URL中的？后面的参数\n   * @returns {string}\n   */\n  getUrlParam(){\n    return document.location.toString().split(\"?\")[1]\n  }\n\n\n  /**\n   * 存储localStorage\n   */\n  setStore(name, content){\n    if (!name) return\n    if (typeof content !== 'string') {\n      content = JSON.stringify(content)\n    }\n    window.localStorage.setItem(name, content)\n  }\n\n  /**\n   * 获取localStorage\n   */\n  getStore(name){\n    if (!name) return\n    return window.localStorage.getItem(name)\n  }\n  /**\n   * 删除localStorage\n   */\n  removeStore(name){\n    if (!name) return\n    window.localStorage.removeItem(name)\n  }\n  /**\n   * 存储sessionStorage\n   */\n  setSessionStore(name, content){\n    if (!name) return\n    if (typeof content !== 'string') {\n      content = JSON.stringify(content)\n    }\n    window.sessionStorage.setItem(name, content)\n  }\n\n  /**\n   * 获取sessionStorage\n   */\n  getSessionStore(name){\n    if (!name) return\n    return window.sessionStorage.getItem(name)\n  }\n  /**\n   * 删除sessionStorage\n   */\n  removeSessionStore(name){\n    if (!name) return\n    window.sessionStorage.removeItem(name)\n  }\n\n  /**\n   * 排序工具类\n   * 依据数组中对象的某个属性排序\n   * @param property  属性\n   * @param sort      升序降序    boolean\n   * @returns {function(*, *): number}\n   */\n  compareSort(property,sort){\n    return (a,b) =>{\n      return sort?a[property] - b[property]:b[property] - a[property]\n    }\n  }\n\n  /**\n   * 判断是否为空\n   */\n  isNull(str){\n    return str !== undefined && str !== null && str != ''\n  }\n\n  /**\n   * 生成guid随机数\n   * @returns {string}\n   */\n  guid(){\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16 | 0,\n        v = c == 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    })\n  }\n  /**\n   * 判断设备 Android/IOS\n   */\n  getUserDevice = () => {\n    let request = ''\n    let u = navigator.userAgent\n    let isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1 //android终端或者uc浏览器\n    let isiOS = !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) //ios终端！\n    if (isAndroid) {\n      request = {\n        isAndroid:true\n      }\n    }\n    if (isiOS) {\n      request = request = {\n        isIOS:true\n      }\n    }\n    return request\n  }\n}\nconst UTILS = Utils.getInstance()\n\nexport default UTILS\n"]}]}