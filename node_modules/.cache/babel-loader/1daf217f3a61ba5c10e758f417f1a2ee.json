{"remainingRequest":"D:\\project\\nft\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\nft\\src\\api\\axios.js","dependencies":[{"path":"D:\\project\\nft\\src\\api\\axios.js","mtime":1649670271988},{"path":"D:\\project\\nft\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650249328532},{"path":"D:\\project\\nft\\node_modules\\babel-loader\\lib\\index.js","mtime":1650249335774}],"contextDependencies":[],"result":["import _classCallCheck from \"D:\\\\project\\\\nft\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\project\\\\nft\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport axios from 'axios';\nimport qs from 'qs';\nimport { baseURL } from \"./config\";\n/**\r\n * 请求函数\r\n * @param url          请求路径\r\n * @param data         请求参数\r\n * @param method       请求类型\r\n * @param isError      错误是否返回\r\n * @param isDownExcel  是否下载Excel\r\n **/\n// 定义私有方法\n\nvar _request = Symbol('_request');\n\nvar _interceptors = Symbol('_interceptors');\n\nvar _getConfig = Symbol('_getConfig');\n\nvar HttpRequest =\n/*#__PURE__*/\nfunction () {\n  function HttpRequest() {\n    _classCallCheck(this, HttpRequest);\n  }\n\n  _createClass(HttpRequest, [{\n    key: _request,\n    value: function value(url, data, method, isError) {\n      var http = axios.create();\n      var options = {\n        url: url,\n        data: data,\n        method: method\n      };\n      options = Object.assign(this[_getConfig](), options);\n\n      this[_interceptors](http, isError);\n\n      return http(options);\n    }\n  }, {\n    key: _interceptors,\n    value: function value(http, isError) {\n      // 请求拦截\n      http.interceptors.request.use(function (config) {\n        config.headers = {\n          // 设置请求头\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          'Authorization': localStorage.getItem('Authorization')\n        };\n        return config;\n      }); // 响应拦截\n\n      http.interceptors.response.use(function (res) {\n        var data = res.data; //setTimeout(() => {\n        // 公共处理请求完毕数据\n        // 请求失败\n        // if (data.ack === 0) {\n        // \tif (isError) {\n        // \t\treturn data\n        // \t} else {\n        // \t\twindow.VW.$message.warning(data.msg)\n        // \t}\n        // } else {\n        // \treturn isError ? data : data.data\n        // }\n\n        if (data != '') {\n          return data;\n        } else {\n          return isError ? data : data.data;\n        } //}, 1000)\n\n      }, function (err) {\n        console.log(err);\n      });\n    } // 创建实例时设置配置的默认值\n\n  }, {\n    key: _getConfig,\n    value: function value() {\n      return {\n        baseURL: baseURL\n      };\n    } // post请求\n\n  }, {\n    key: \"post\",\n    value: function post(url) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var isError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return this[_request](url, qs.stringify(data), 'post', isError);\n    } // get请求\n\n  }, {\n    key: \"get\",\n    value: function get(url) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var isError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      // 封装get参数\n      // let dataStr = '?'\n      // Object.keys(data)\n      //   .forEach(key => {\n      //     dataStr += key + '=' + data[key] + '&'\n      //   })\n      // if (dataStr !== '') {\n      //   dataStr = dataStr.substring(0, dataStr.lastIndexOf('&'))\n      //   url = url + dataStr\n      // }\n      url = url + data;\n      return this[_request](url, {}, 'get', isError);\n    } // delete请求\n\n  }, {\n    key: \"delete\",\n    value: function _delete(url) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var isError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return this[_request](url, data, 'delete', isError);\n    } // put请求\n\n  }, {\n    key: \"put\",\n    value: function put(url) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var isError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return this[_request](url, data, 'put', isError);\n    }\n  }]);\n\n  return HttpRequest;\n}();\n\nexport default HttpRequest;",{"version":3,"sources":["D:\\project\\nft\\src\\api\\axios.js"],"names":["axios","qs","baseURL","_request","Symbol","_interceptors","_getConfig","HttpRequest","url","data","method","isError","http","create","options","Object","assign","interceptors","request","use","config","headers","localStorage","getItem","response","res","err","console","log","stringify"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport qs from 'qs'\r\nimport {\r\n\tbaseURL\r\n} from './config'\r\n/**\r\n * 请求函数\r\n * @param url          请求路径\r\n * @param data         请求参数\r\n * @param method       请求类型\r\n * @param isError      错误是否返回\r\n * @param isDownExcel  是否下载Excel\r\n **/\r\n// 定义私有方法\r\nconst _request = Symbol('_request')\r\nconst _interceptors = Symbol('_interceptors')\r\nconst _getConfig = Symbol('_getConfig')\r\nclass HttpRequest {\r\n\t[_request](url, data, method, isError) {\r\n\t\tconst http = axios.create()\r\n\t\tvar options = {\r\n\t\t\turl,\r\n\t\t\tdata,\r\n\t\t\tmethod\r\n\t\t}\r\n\t\toptions = Object.assign(this[_getConfig](), options)\r\n\t\tthis[_interceptors](http, isError)\r\n\t\treturn http(options)\r\n\t}\r\n\t[_interceptors](http, isError) {\r\n\t\t// 请求拦截\r\n\t\thttp.interceptors.request.use(config => {\r\n\t\t\tconfig.headers = {\r\n\t\t\t\t// 设置请求头\r\n\t\t\t\t\"Content-Type\":\"application/x-www-form-urlencoded\",\r\n\t\t\t\t'Authorization': localStorage.getItem('Authorization')\r\n\t\t\t}\r\n\t\t\treturn config\r\n\t\t})\r\n\t\t// 响应拦截\r\n\t\thttp.interceptors.response.use(res => {\r\n\t\t\tconst {\r\n\t\t\t\tdata\r\n\t\t\t} = res\r\n\t\t\t//setTimeout(() => {\r\n\t\t\t// 公共处理请求完毕数据\r\n\t\t\t// 请求失败\r\n\t\t\t// if (data.ack === 0) {\r\n\t\t\t// \tif (isError) {\r\n\t\t\t// \t\treturn data\r\n\t\t\t// \t} else {\r\n\t\t\t// \t\twindow.VW.$message.warning(data.msg)\r\n\t\t\t// \t}\r\n\t\t\t// } else {\r\n\t\t\t// \treturn isError ? data : data.data\r\n\t\t\t// }\r\n\t\t\tif (data !='') {\r\n\t\t\t\treturn data\r\n\t\t\t} else {\r\n\t\t\t\treturn isError ? data : data.data\r\n\t\t\t}\r\n\r\n\t\t\t//}, 1000)\r\n\r\n\t\t}, err => {\r\n\t\t\tconsole.log(err)\r\n\t\t})\r\n\t}\r\n\t// 创建实例时设置配置的默认值\r\n\t[_getConfig]() {\r\n\t\treturn {\r\n\t\t\tbaseURL\r\n\t\t}\r\n\t}\r\n\t// post请求\r\n\tpost(url, data = {}, isError = false) {\r\n\t\treturn this[_request](url,  qs.stringify(data), 'post', isError)\r\n\t}\r\n\t// get请求\r\n\tget(url, data = {}, isError = false) {\r\n\t\t// 封装get参数\r\n\t\t// let dataStr = '?'\r\n\t\t// Object.keys(data)\r\n\t\t//   .forEach(key => {\r\n\t\t//     dataStr += key + '=' + data[key] + '&'\r\n\t\t//   })\r\n\t\t// if (dataStr !== '') {\r\n\t\t//   dataStr = dataStr.substring(0, dataStr.lastIndexOf('&'))\r\n\t\t//   url = url + dataStr\r\n\t\t// }\r\n\t\turl = url + data\r\n\t\treturn this[_request](url, {}, 'get', isError)\r\n\t}\r\n\t// delete请求\r\n\tdelete(url, data = {}, isError = false) {\r\n\t\treturn this[_request](url, data, 'delete', isError)\r\n\t}\r\n\t// put请求\r\n\tput(url, data = {}, isError = false) {\r\n\t\treturn this[_request](url, data, 'put', isError)\r\n\t}\r\n}\r\n\r\nexport default HttpRequest\n"]}]}